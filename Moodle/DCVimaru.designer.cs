#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moodle
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Vimaru")]
	public partial class DCVimaruDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBoMon(BoMon instance);
    partial void UpdateBoMon(BoMon instance);
    partial void DeleteBoMon(BoMon instance);
    partial void InsertKhoa(Khoa instance);
    partial void UpdateKhoa(Khoa instance);
    partial void DeleteKhoa(Khoa instance);
    partial void InsertHocPhan(HocPhan instance);
    partial void UpdateHocPhan(HocPhan instance);
    partial void DeleteHocPhan(HocPhan instance);
    partial void InsertThoiKhoaBieu(ThoiKhoaBieu instance);
    partial void UpdateThoiKhoaBieu(ThoiKhoaBieu instance);
    partial void DeleteThoiKhoaBieu(ThoiKhoaBieu instance);
    partial void InsertSinhVien(SinhVien instance);
    partial void UpdateSinhVien(SinhVien instance);
    partial void DeleteSinhVien(SinhVien instance);
    partial void InsertLop(Lop instance);
    partial void UpdateLop(Lop instance);
    partial void DeleteLop(Lop instance);
    partial void InsertDangKy(DangKy instance);
    partial void UpdateDangKy(DangKy instance);
    partial void DeleteDangKy(DangKy instance);
    partial void InsertNhom(Nhom instance);
    partial void UpdateNhom(Nhom instance);
    partial void DeleteNhom(Nhom instance);
    partial void InsertTo(To instance);
    partial void UpdateTo(To instance);
    partial void DeleteTo(To instance);
    #endregion
		
		public DCVimaruDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["VimaruConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DCVimaruDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCVimaruDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCVimaruDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCVimaruDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BoMon> BoMons
		{
			get
			{
				return this.GetTable<BoMon>();
			}
		}
		
		public System.Data.Linq.Table<Khoa> Khoas
		{
			get
			{
				return this.GetTable<Khoa>();
			}
		}
		
		public System.Data.Linq.Table<HocPhan> HocPhans
		{
			get
			{
				return this.GetTable<HocPhan>();
			}
		}
		
		public System.Data.Linq.Table<ThoiKhoaBieu> ThoiKhoaBieus
		{
			get
			{
				return this.GetTable<ThoiKhoaBieu>();
			}
		}
		
		public System.Data.Linq.Table<SinhVien> SinhViens
		{
			get
			{
				return this.GetTable<SinhVien>();
			}
		}
		
		public System.Data.Linq.Table<Lop> Lops
		{
			get
			{
				return this.GetTable<Lop>();
			}
		}
		
		public System.Data.Linq.Table<DangKy> DangKies
		{
			get
			{
				return this.GetTable<DangKy>();
			}
		}
		
		public System.Data.Linq.Table<Nhom> Nhoms
		{
			get
			{
				return this.GetTable<Nhom>();
			}
		}
		
		public System.Data.Linq.Table<To> Tos
		{
			get
			{
				return this.GetTable<To>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BoMon")]
	public partial class BoMon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaBoMon;
		
		private string _TenBoMon;
		
		private long _Id;
		
		private string _MaKhoa;
		
		private EntitySet<HocPhan> _HocPhans;
		
		private EntityRef<Khoa> _Khoa;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaBoMonChanging(int value);
    partial void OnMaBoMonChanged();
    partial void OnTenBoMonChanging(string value);
    partial void OnTenBoMonChanged();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnMaKhoaChanging(string value);
    partial void OnMaKhoaChanged();
    #endregion
		
		public BoMon()
		{
			this._HocPhans = new EntitySet<HocPhan>(new Action<HocPhan>(this.attach_HocPhans), new Action<HocPhan>(this.detach_HocPhans));
			this._Khoa = default(EntityRef<Khoa>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaBoMon", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaBoMon
		{
			get
			{
				return this._MaBoMon;
			}
			set
			{
				if ((this._MaBoMon != value))
				{
					this.OnMaBoMonChanging(value);
					this.SendPropertyChanging();
					this._MaBoMon = value;
					this.SendPropertyChanged("MaBoMon");
					this.OnMaBoMonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenBoMon", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string TenBoMon
		{
			get
			{
				return this._TenBoMon;
			}
			set
			{
				if ((this._TenBoMon != value))
				{
					this.OnTenBoMonChanging(value);
					this.SendPropertyChanging();
					this._TenBoMon = value;
					this.SendPropertyChanged("TenBoMon");
					this.OnTenBoMonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="BigInt NOT NULL")]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaKhoa", DbType="VarChar(3)")]
		public string MaKhoa
		{
			get
			{
				return this._MaKhoa;
			}
			set
			{
				if ((this._MaKhoa != value))
				{
					if (this._Khoa.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaKhoaChanging(value);
					this.SendPropertyChanging();
					this._MaKhoa = value;
					this.SendPropertyChanged("MaKhoa");
					this.OnMaKhoaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BoMon_HocPhan", Storage="_HocPhans", ThisKey="MaBoMon", OtherKey="MaBoMon")]
		public EntitySet<HocPhan> HocPhans
		{
			get
			{
				return this._HocPhans;
			}
			set
			{
				this._HocPhans.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Khoa_BoMon", Storage="_Khoa", ThisKey="MaKhoa", OtherKey="MaKhoa", IsForeignKey=true)]
		public Khoa Khoa
		{
			get
			{
				return this._Khoa.Entity;
			}
			set
			{
				Khoa previousValue = this._Khoa.Entity;
				if (((previousValue != value) 
							|| (this._Khoa.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Khoa.Entity = null;
						previousValue.BoMons.Remove(this);
					}
					this._Khoa.Entity = value;
					if ((value != null))
					{
						value.BoMons.Add(this);
						this._MaKhoa = value.MaKhoa;
					}
					else
					{
						this._MaKhoa = default(string);
					}
					this.SendPropertyChanged("Khoa");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HocPhans(HocPhan entity)
		{
			this.SendPropertyChanging();
			entity.BoMon = this;
		}
		
		private void detach_HocPhans(HocPhan entity)
		{
			this.SendPropertyChanging();
			entity.BoMon = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Khoa")]
	public partial class Khoa : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MaKhoa;
		
		private string _TenKhoa;
		
		private string _TenRutGon;
		
		private long _Id;
		
		private EntitySet<BoMon> _BoMons;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaKhoaChanging(string value);
    partial void OnMaKhoaChanged();
    partial void OnTenKhoaChanging(string value);
    partial void OnTenKhoaChanged();
    partial void OnTenRutGonChanging(string value);
    partial void OnTenRutGonChanged();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    #endregion
		
		public Khoa()
		{
			this._BoMons = new EntitySet<BoMon>(new Action<BoMon>(this.attach_BoMons), new Action<BoMon>(this.detach_BoMons));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaKhoa", DbType="VarChar(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MaKhoa
		{
			get
			{
				return this._MaKhoa;
			}
			set
			{
				if ((this._MaKhoa != value))
				{
					this.OnMaKhoaChanging(value);
					this.SendPropertyChanging();
					this._MaKhoa = value;
					this.SendPropertyChanged("MaKhoa");
					this.OnMaKhoaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenKhoa", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string TenKhoa
		{
			get
			{
				return this._TenKhoa;
			}
			set
			{
				if ((this._TenKhoa != value))
				{
					this.OnTenKhoaChanging(value);
					this.SendPropertyChanging();
					this._TenKhoa = value;
					this.SendPropertyChanged("TenKhoa");
					this.OnTenKhoaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenRutGon", DbType="NVarChar(3)")]
		public string TenRutGon
		{
			get
			{
				return this._TenRutGon;
			}
			set
			{
				if ((this._TenRutGon != value))
				{
					this.OnTenRutGonChanging(value);
					this.SendPropertyChanging();
					this._TenRutGon = value;
					this.SendPropertyChanged("TenRutGon");
					this.OnTenRutGonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="BigInt NOT NULL")]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Khoa_BoMon", Storage="_BoMons", ThisKey="MaKhoa", OtherKey="MaKhoa")]
		public EntitySet<BoMon> BoMons
		{
			get
			{
				return this._BoMons;
			}
			set
			{
				this._BoMons.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BoMons(BoMon entity)
		{
			this.SendPropertyChanging();
			entity.Khoa = this;
		}
		
		private void detach_BoMons(BoMon entity)
		{
			this.SendPropertyChanging();
			entity.Khoa = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HocPhan")]
	public partial class HocPhan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MaHP;
		
		private string _TenHP;
		
		private System.Nullable<short> _TCHT;
		
		private System.Nullable<int> _MaBoMon;
		
		private long _Id;
		
		private EntitySet<ThoiKhoaBieu> _ThoiKhoaBieus;
		
		private EntityRef<BoMon> _BoMon;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaHPChanging(string value);
    partial void OnMaHPChanged();
    partial void OnTenHPChanging(string value);
    partial void OnTenHPChanged();
    partial void OnTCHTChanging(System.Nullable<short> value);
    partial void OnTCHTChanged();
    partial void OnMaBoMonChanging(System.Nullable<int> value);
    partial void OnMaBoMonChanged();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    #endregion
		
		public HocPhan()
		{
			this._ThoiKhoaBieus = new EntitySet<ThoiKhoaBieu>(new Action<ThoiKhoaBieu>(this.attach_ThoiKhoaBieus), new Action<ThoiKhoaBieu>(this.detach_ThoiKhoaBieus));
			this._BoMon = default(EntityRef<BoMon>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaHP", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MaHP
		{
			get
			{
				return this._MaHP;
			}
			set
			{
				if ((this._MaHP != value))
				{
					this.OnMaHPChanging(value);
					this.SendPropertyChanging();
					this._MaHP = value;
					this.SendPropertyChanged("MaHP");
					this.OnMaHPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenHP", DbType="NVarChar(100)")]
		public string TenHP
		{
			get
			{
				return this._TenHP;
			}
			set
			{
				if ((this._TenHP != value))
				{
					this.OnTenHPChanging(value);
					this.SendPropertyChanging();
					this._TenHP = value;
					this.SendPropertyChanged("TenHP");
					this.OnTenHPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TCHT", DbType="SmallInt")]
		public System.Nullable<short> TCHT
		{
			get
			{
				return this._TCHT;
			}
			set
			{
				if ((this._TCHT != value))
				{
					this.OnTCHTChanging(value);
					this.SendPropertyChanging();
					this._TCHT = value;
					this.SendPropertyChanged("TCHT");
					this.OnTCHTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaBoMon", DbType="Int")]
		public System.Nullable<int> MaBoMon
		{
			get
			{
				return this._MaBoMon;
			}
			set
			{
				if ((this._MaBoMon != value))
				{
					if (this._BoMon.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaBoMonChanging(value);
					this.SendPropertyChanging();
					this._MaBoMon = value;
					this.SendPropertyChanged("MaBoMon");
					this.OnMaBoMonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="BigInt NOT NULL")]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HocPhan_ThoiKhoaBieu", Storage="_ThoiKhoaBieus", ThisKey="MaHP", OtherKey="MaHP")]
		public EntitySet<ThoiKhoaBieu> ThoiKhoaBieus
		{
			get
			{
				return this._ThoiKhoaBieus;
			}
			set
			{
				this._ThoiKhoaBieus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BoMon_HocPhan", Storage="_BoMon", ThisKey="MaBoMon", OtherKey="MaBoMon", IsForeignKey=true)]
		public BoMon BoMon
		{
			get
			{
				return this._BoMon.Entity;
			}
			set
			{
				BoMon previousValue = this._BoMon.Entity;
				if (((previousValue != value) 
							|| (this._BoMon.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BoMon.Entity = null;
						previousValue.HocPhans.Remove(this);
					}
					this._BoMon.Entity = value;
					if ((value != null))
					{
						value.HocPhans.Add(this);
						this._MaBoMon = value.MaBoMon;
					}
					else
					{
						this._MaBoMon = default(Nullable<int>);
					}
					this.SendPropertyChanged("BoMon");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ThoiKhoaBieus(ThoiKhoaBieu entity)
		{
			this.SendPropertyChanging();
			entity.HocPhan = this;
		}
		
		private void detach_ThoiKhoaBieus(ThoiKhoaBieu entity)
		{
			this.SendPropertyChanging();
			entity.HocPhan = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ThoiKhoaBieu")]
	public partial class ThoiKhoaBieu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MaHP;
		
		private string _MaNH;
		
		private string _Thu;
		
		private int _TietBD;
		
		private int _SoTiet;
		
		private System.DateTime _NgayBD;
		
		private System.DateTime _NgayKT;
		
		private long _Id;
		
		private long _STT;
		
		private EntitySet<DangKy> _DangKies;
		
		private EntitySet<Nhom> _Nhoms;
		
		private EntitySet<To> _Tos;
		
		private EntityRef<HocPhan> _HocPhan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaHPChanging(string value);
    partial void OnMaHPChanged();
    partial void OnMaNHChanging(string value);
    partial void OnMaNHChanged();
    partial void OnThuChanging(string value);
    partial void OnThuChanged();
    partial void OnTietBDChanging(int value);
    partial void OnTietBDChanged();
    partial void OnSoTietChanging(int value);
    partial void OnSoTietChanged();
    partial void OnNgayBDChanging(System.DateTime value);
    partial void OnNgayBDChanged();
    partial void OnNgayKTChanging(System.DateTime value);
    partial void OnNgayKTChanged();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnSTTChanging(long value);
    partial void OnSTTChanged();
    #endregion
		
		public ThoiKhoaBieu()
		{
			this._DangKies = new EntitySet<DangKy>(new Action<DangKy>(this.attach_DangKies), new Action<DangKy>(this.detach_DangKies));
			this._Nhoms = new EntitySet<Nhom>(new Action<Nhom>(this.attach_Nhoms), new Action<Nhom>(this.detach_Nhoms));
			this._Tos = new EntitySet<To>(new Action<To>(this.attach_Tos), new Action<To>(this.detach_Tos));
			this._HocPhan = default(EntityRef<HocPhan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaHP", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string MaHP
		{
			get
			{
				return this._MaHP;
			}
			set
			{
				if ((this._MaHP != value))
				{
					if (this._HocPhan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaHPChanging(value);
					this.SendPropertyChanging();
					this._MaHP = value;
					this.SendPropertyChanged("MaHP");
					this.OnMaHPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaNH", DbType="VarChar(6) NOT NULL", CanBeNull=false)]
		public string MaNH
		{
			get
			{
				return this._MaNH;
			}
			set
			{
				if ((this._MaNH != value))
				{
					this.OnMaNHChanging(value);
					this.SendPropertyChanging();
					this._MaNH = value;
					this.SendPropertyChanged("MaNH");
					this.OnMaNHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Thu", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string Thu
		{
			get
			{
				return this._Thu;
			}
			set
			{
				if ((this._Thu != value))
				{
					this.OnThuChanging(value);
					this.SendPropertyChanging();
					this._Thu = value;
					this.SendPropertyChanged("Thu");
					this.OnThuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TietBD", DbType="Int NOT NULL")]
		public int TietBD
		{
			get
			{
				return this._TietBD;
			}
			set
			{
				if ((this._TietBD != value))
				{
					this.OnTietBDChanging(value);
					this.SendPropertyChanging();
					this._TietBD = value;
					this.SendPropertyChanged("TietBD");
					this.OnTietBDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoTiet", DbType="Int NOT NULL")]
		public int SoTiet
		{
			get
			{
				return this._SoTiet;
			}
			set
			{
				if ((this._SoTiet != value))
				{
					this.OnSoTietChanging(value);
					this.SendPropertyChanging();
					this._SoTiet = value;
					this.SendPropertyChanged("SoTiet");
					this.OnSoTietChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NgayBD", DbType="DateTime NOT NULL")]
		public System.DateTime NgayBD
		{
			get
			{
				return this._NgayBD;
			}
			set
			{
				if ((this._NgayBD != value))
				{
					this.OnNgayBDChanging(value);
					this.SendPropertyChanging();
					this._NgayBD = value;
					this.SendPropertyChanged("NgayBD");
					this.OnNgayBDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NgayKT", DbType="DateTime NOT NULL")]
		public System.DateTime NgayKT
		{
			get
			{
				return this._NgayKT;
			}
			set
			{
				if ((this._NgayKT != value))
				{
					this.OnNgayKTChanging(value);
					this.SendPropertyChanging();
					this._NgayKT = value;
					this.SendPropertyChanged("NgayKT");
					this.OnNgayKTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="BigInt NOT NULL")]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STT", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long STT
		{
			get
			{
				return this._STT;
			}
			set
			{
				if ((this._STT != value))
				{
					this.OnSTTChanging(value);
					this.SendPropertyChanging();
					this._STT = value;
					this.SendPropertyChanged("STT");
					this.OnSTTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThoiKhoaBieu_DangKy", Storage="_DangKies", ThisKey="STT", OtherKey="MaTKB")]
		public EntitySet<DangKy> DangKies
		{
			get
			{
				return this._DangKies;
			}
			set
			{
				this._DangKies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThoiKhoaBieu_Nhom", Storage="_Nhoms", ThisKey="STT", OtherKey="MaTKB")]
		public EntitySet<Nhom> Nhoms
		{
			get
			{
				return this._Nhoms;
			}
			set
			{
				this._Nhoms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThoiKhoaBieu_To", Storage="_Tos", ThisKey="STT", OtherKey="MaTKB")]
		public EntitySet<To> Tos
		{
			get
			{
				return this._Tos;
			}
			set
			{
				this._Tos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HocPhan_ThoiKhoaBieu", Storage="_HocPhan", ThisKey="MaHP", OtherKey="MaHP", IsForeignKey=true)]
		public HocPhan HocPhan
		{
			get
			{
				return this._HocPhan.Entity;
			}
			set
			{
				HocPhan previousValue = this._HocPhan.Entity;
				if (((previousValue != value) 
							|| (this._HocPhan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HocPhan.Entity = null;
						previousValue.ThoiKhoaBieus.Remove(this);
					}
					this._HocPhan.Entity = value;
					if ((value != null))
					{
						value.ThoiKhoaBieus.Add(this);
						this._MaHP = value.MaHP;
					}
					else
					{
						this._MaHP = default(string);
					}
					this.SendPropertyChanged("HocPhan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DangKies(DangKy entity)
		{
			this.SendPropertyChanging();
			entity.ThoiKhoaBieu = this;
		}
		
		private void detach_DangKies(DangKy entity)
		{
			this.SendPropertyChanging();
			entity.ThoiKhoaBieu = null;
		}
		
		private void attach_Nhoms(Nhom entity)
		{
			this.SendPropertyChanging();
			entity.ThoiKhoaBieu = this;
		}
		
		private void detach_Nhoms(Nhom entity)
		{
			this.SendPropertyChanging();
			entity.ThoiKhoaBieu = null;
		}
		
		private void attach_Tos(To entity)
		{
			this.SendPropertyChanging();
			entity.ThoiKhoaBieu = this;
		}
		
		private void detach_Tos(To entity)
		{
			this.SendPropertyChanging();
			entity.ThoiKhoaBieu = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SinhVien")]
	public partial class SinhVien : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MaSV;
		
		private string _Ho;
		
		private string _Ten;
		
		private long _Id;
		
		private System.Nullable<int> _MaLop;
		
		private EntitySet<DangKy> _DangKies;
		
		private EntityRef<Lop> _Lop;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaSVChanging(string value);
    partial void OnMaSVChanged();
    partial void OnHoChanging(string value);
    partial void OnHoChanged();
    partial void OnTenChanging(string value);
    partial void OnTenChanged();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnMaLopChanging(System.Nullable<int> value);
    partial void OnMaLopChanged();
    #endregion
		
		public SinhVien()
		{
			this._DangKies = new EntitySet<DangKy>(new Action<DangKy>(this.attach_DangKies), new Action<DangKy>(this.detach_DangKies));
			this._Lop = default(EntityRef<Lop>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaSV", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MaSV
		{
			get
			{
				return this._MaSV;
			}
			set
			{
				if ((this._MaSV != value))
				{
					this.OnMaSVChanging(value);
					this.SendPropertyChanging();
					this._MaSV = value;
					this.SendPropertyChanged("MaSV");
					this.OnMaSVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ho", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Ho
		{
			get
			{
				return this._Ho;
			}
			set
			{
				if ((this._Ho != value))
				{
					this.OnHoChanging(value);
					this.SendPropertyChanging();
					this._Ho = value;
					this.SendPropertyChanged("Ho");
					this.OnHoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ten", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Ten
		{
			get
			{
				return this._Ten;
			}
			set
			{
				if ((this._Ten != value))
				{
					this.OnTenChanging(value);
					this.SendPropertyChanging();
					this._Ten = value;
					this.SendPropertyChanged("Ten");
					this.OnTenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="BigInt NOT NULL")]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaLop", DbType="Int")]
		public System.Nullable<int> MaLop
		{
			get
			{
				return this._MaLop;
			}
			set
			{
				if ((this._MaLop != value))
				{
					if (this._Lop.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaLopChanging(value);
					this.SendPropertyChanging();
					this._MaLop = value;
					this.SendPropertyChanged("MaLop");
					this.OnMaLopChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SinhVien_DangKy", Storage="_DangKies", ThisKey="MaSV", OtherKey="MaSV")]
		public EntitySet<DangKy> DangKies
		{
			get
			{
				return this._DangKies;
			}
			set
			{
				this._DangKies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lop_SinhVien", Storage="_Lop", ThisKey="MaLop", OtherKey="MaLop", IsForeignKey=true)]
		public Lop Lop
		{
			get
			{
				return this._Lop.Entity;
			}
			set
			{
				Lop previousValue = this._Lop.Entity;
				if (((previousValue != value) 
							|| (this._Lop.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lop.Entity = null;
						previousValue.SinhViens.Remove(this);
					}
					this._Lop.Entity = value;
					if ((value != null))
					{
						value.SinhViens.Add(this);
						this._MaLop = value.MaLop;
					}
					else
					{
						this._MaLop = default(Nullable<int>);
					}
					this.SendPropertyChanged("Lop");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DangKies(DangKy entity)
		{
			this.SendPropertyChanging();
			entity.SinhVien = this;
		}
		
		private void detach_DangKies(DangKy entity)
		{
			this.SendPropertyChanging();
			entity.SinhVien = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lop")]
	public partial class Lop : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaLop;
		
		private string _TenLop;
		
		private EntitySet<SinhVien> _SinhViens;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaLopChanging(int value);
    partial void OnMaLopChanged();
    partial void OnTenLopChanging(string value);
    partial void OnTenLopChanged();
    #endregion
		
		public Lop()
		{
			this._SinhViens = new EntitySet<SinhVien>(new Action<SinhVien>(this.attach_SinhViens), new Action<SinhVien>(this.detach_SinhViens));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaLop", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaLop
		{
			get
			{
				return this._MaLop;
			}
			set
			{
				if ((this._MaLop != value))
				{
					this.OnMaLopChanging(value);
					this.SendPropertyChanging();
					this._MaLop = value;
					this.SendPropertyChanged("MaLop");
					this.OnMaLopChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenLop", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TenLop
		{
			get
			{
				return this._TenLop;
			}
			set
			{
				if ((this._TenLop != value))
				{
					this.OnTenLopChanging(value);
					this.SendPropertyChanging();
					this._TenLop = value;
					this.SendPropertyChanged("TenLop");
					this.OnTenLopChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lop_SinhVien", Storage="_SinhViens", ThisKey="MaLop", OtherKey="MaLop")]
		public EntitySet<SinhVien> SinhViens
		{
			get
			{
				return this._SinhViens;
			}
			set
			{
				this._SinhViens.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SinhViens(SinhVien entity)
		{
			this.SendPropertyChanging();
			entity.Lop = this;
		}
		
		private void detach_SinhViens(SinhVien entity)
		{
			this.SendPropertyChanging();
			entity.Lop = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DangKy")]
	public partial class DangKy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MaSV;
		
		private long _MaTKB;
		
		private long _STT;
		
		private bool _GhiDanh;
		
		private System.Nullable<long> _ID_Nhom;
		
		private EntityRef<SinhVien> _SinhVien;
		
		private EntityRef<ThoiKhoaBieu> _ThoiKhoaBieu;
		
		private EntityRef<Nhom> _Nhom;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaSVChanging(string value);
    partial void OnMaSVChanged();
    partial void OnMaTKBChanging(long value);
    partial void OnMaTKBChanged();
    partial void OnSTTChanging(long value);
    partial void OnSTTChanged();
    partial void OnGhiDanhChanging(bool value);
    partial void OnGhiDanhChanged();
    partial void OnID_NhomChanging(System.Nullable<long> value);
    partial void OnID_NhomChanged();
    #endregion
		
		public DangKy()
		{
			this._SinhVien = default(EntityRef<SinhVien>);
			this._ThoiKhoaBieu = default(EntityRef<ThoiKhoaBieu>);
			this._Nhom = default(EntityRef<Nhom>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaSV", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string MaSV
		{
			get
			{
				return this._MaSV;
			}
			set
			{
				if ((this._MaSV != value))
				{
					if (this._SinhVien.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaSVChanging(value);
					this.SendPropertyChanging();
					this._MaSV = value;
					this.SendPropertyChanged("MaSV");
					this.OnMaSVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaTKB", DbType="BigInt NOT NULL")]
		public long MaTKB
		{
			get
			{
				return this._MaTKB;
			}
			set
			{
				if ((this._MaTKB != value))
				{
					if (this._ThoiKhoaBieu.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaTKBChanging(value);
					this.SendPropertyChanging();
					this._MaTKB = value;
					this.SendPropertyChanged("MaTKB");
					this.OnMaTKBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STT", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long STT
		{
			get
			{
				return this._STT;
			}
			set
			{
				if ((this._STT != value))
				{
					this.OnSTTChanging(value);
					this.SendPropertyChanging();
					this._STT = value;
					this.SendPropertyChanged("STT");
					this.OnSTTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GhiDanh", DbType="Bit NOT NULL")]
		public bool GhiDanh
		{
			get
			{
				return this._GhiDanh;
			}
			set
			{
				if ((this._GhiDanh != value))
				{
					this.OnGhiDanhChanging(value);
					this.SendPropertyChanging();
					this._GhiDanh = value;
					this.SendPropertyChanged("GhiDanh");
					this.OnGhiDanhChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Nhom", DbType="BigInt")]
		public System.Nullable<long> ID_Nhom
		{
			get
			{
				return this._ID_Nhom;
			}
			set
			{
				if ((this._ID_Nhom != value))
				{
					if (this._Nhom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_NhomChanging(value);
					this.SendPropertyChanging();
					this._ID_Nhom = value;
					this.SendPropertyChanged("ID_Nhom");
					this.OnID_NhomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SinhVien_DangKy", Storage="_SinhVien", ThisKey="MaSV", OtherKey="MaSV", IsForeignKey=true)]
		public SinhVien SinhVien
		{
			get
			{
				return this._SinhVien.Entity;
			}
			set
			{
				SinhVien previousValue = this._SinhVien.Entity;
				if (((previousValue != value) 
							|| (this._SinhVien.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SinhVien.Entity = null;
						previousValue.DangKies.Remove(this);
					}
					this._SinhVien.Entity = value;
					if ((value != null))
					{
						value.DangKies.Add(this);
						this._MaSV = value.MaSV;
					}
					else
					{
						this._MaSV = default(string);
					}
					this.SendPropertyChanged("SinhVien");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThoiKhoaBieu_DangKy", Storage="_ThoiKhoaBieu", ThisKey="MaTKB", OtherKey="STT", IsForeignKey=true)]
		public ThoiKhoaBieu ThoiKhoaBieu
		{
			get
			{
				return this._ThoiKhoaBieu.Entity;
			}
			set
			{
				ThoiKhoaBieu previousValue = this._ThoiKhoaBieu.Entity;
				if (((previousValue != value) 
							|| (this._ThoiKhoaBieu.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ThoiKhoaBieu.Entity = null;
						previousValue.DangKies.Remove(this);
					}
					this._ThoiKhoaBieu.Entity = value;
					if ((value != null))
					{
						value.DangKies.Add(this);
						this._MaTKB = value.STT;
					}
					else
					{
						this._MaTKB = default(long);
					}
					this.SendPropertyChanged("ThoiKhoaBieu");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nhom_DangKy", Storage="_Nhom", ThisKey="ID_Nhom", OtherKey="ID_Nhom", IsForeignKey=true)]
		public Nhom Nhom
		{
			get
			{
				return this._Nhom.Entity;
			}
			set
			{
				Nhom previousValue = this._Nhom.Entity;
				if (((previousValue != value) 
							|| (this._Nhom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Nhom.Entity = null;
						previousValue.DangKies.Remove(this);
					}
					this._Nhom.Entity = value;
					if ((value != null))
					{
						value.DangKies.Add(this);
						this._ID_Nhom = value.ID_Nhom;
					}
					else
					{
						this._ID_Nhom = default(Nullable<long>);
					}
					this.SendPropertyChanged("Nhom");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Nhom")]
	public partial class Nhom : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID_Nhom;
		
		private string _TenNhom;
		
		private string _MoTa;
		
		private System.Nullable<long> _ID_To;
		
		private long _MaTKB;
		
		private EntitySet<DangKy> _DangKies;
		
		private EntityRef<ThoiKhoaBieu> _ThoiKhoaBieu;
		
		private EntityRef<To> _To;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_NhomChanging(long value);
    partial void OnID_NhomChanged();
    partial void OnTenNhomChanging(string value);
    partial void OnTenNhomChanged();
    partial void OnMoTaChanging(string value);
    partial void OnMoTaChanged();
    partial void OnID_ToChanging(System.Nullable<long> value);
    partial void OnID_ToChanged();
    partial void OnMaTKBChanging(long value);
    partial void OnMaTKBChanged();
    #endregion
		
		public Nhom()
		{
			this._DangKies = new EntitySet<DangKy>(new Action<DangKy>(this.attach_DangKies), new Action<DangKy>(this.detach_DangKies));
			this._ThoiKhoaBieu = default(EntityRef<ThoiKhoaBieu>);
			this._To = default(EntityRef<To>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Nhom", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID_Nhom
		{
			get
			{
				return this._ID_Nhom;
			}
			set
			{
				if ((this._ID_Nhom != value))
				{
					this.OnID_NhomChanging(value);
					this.SendPropertyChanging();
					this._ID_Nhom = value;
					this.SendPropertyChanged("ID_Nhom");
					this.OnID_NhomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenNhom", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TenNhom
		{
			get
			{
				return this._TenNhom;
			}
			set
			{
				if ((this._TenNhom != value))
				{
					this.OnTenNhomChanging(value);
					this.SendPropertyChanging();
					this._TenNhom = value;
					this.SendPropertyChanged("TenNhom");
					this.OnTenNhomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoTa", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string MoTa
		{
			get
			{
				return this._MoTa;
			}
			set
			{
				if ((this._MoTa != value))
				{
					this.OnMoTaChanging(value);
					this.SendPropertyChanging();
					this._MoTa = value;
					this.SendPropertyChanged("MoTa");
					this.OnMoTaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_To", DbType="BigInt")]
		public System.Nullable<long> ID_To
		{
			get
			{
				return this._ID_To;
			}
			set
			{
				if ((this._ID_To != value))
				{
					if (this._To.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_ToChanging(value);
					this.SendPropertyChanging();
					this._ID_To = value;
					this.SendPropertyChanged("ID_To");
					this.OnID_ToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaTKB", DbType="BigInt NOT NULL")]
		public long MaTKB
		{
			get
			{
				return this._MaTKB;
			}
			set
			{
				if ((this._MaTKB != value))
				{
					if (this._ThoiKhoaBieu.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaTKBChanging(value);
					this.SendPropertyChanging();
					this._MaTKB = value;
					this.SendPropertyChanged("MaTKB");
					this.OnMaTKBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nhom_DangKy", Storage="_DangKies", ThisKey="ID_Nhom", OtherKey="ID_Nhom")]
		public EntitySet<DangKy> DangKies
		{
			get
			{
				return this._DangKies;
			}
			set
			{
				this._DangKies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThoiKhoaBieu_Nhom", Storage="_ThoiKhoaBieu", ThisKey="MaTKB", OtherKey="STT", IsForeignKey=true)]
		public ThoiKhoaBieu ThoiKhoaBieu
		{
			get
			{
				return this._ThoiKhoaBieu.Entity;
			}
			set
			{
				ThoiKhoaBieu previousValue = this._ThoiKhoaBieu.Entity;
				if (((previousValue != value) 
							|| (this._ThoiKhoaBieu.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ThoiKhoaBieu.Entity = null;
						previousValue.Nhoms.Remove(this);
					}
					this._ThoiKhoaBieu.Entity = value;
					if ((value != null))
					{
						value.Nhoms.Add(this);
						this._MaTKB = value.STT;
					}
					else
					{
						this._MaTKB = default(long);
					}
					this.SendPropertyChanged("ThoiKhoaBieu");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="To_Nhom", Storage="_To", ThisKey="ID_To", OtherKey="ID_To", IsForeignKey=true)]
		public To To
		{
			get
			{
				return this._To.Entity;
			}
			set
			{
				To previousValue = this._To.Entity;
				if (((previousValue != value) 
							|| (this._To.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._To.Entity = null;
						previousValue.Nhoms.Remove(this);
					}
					this._To.Entity = value;
					if ((value != null))
					{
						value.Nhoms.Add(this);
						this._ID_To = value.ID_To;
					}
					else
					{
						this._ID_To = default(Nullable<long>);
					}
					this.SendPropertyChanged("To");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DangKies(DangKy entity)
		{
			this.SendPropertyChanging();
			entity.Nhom = this;
		}
		
		private void detach_DangKies(DangKy entity)
		{
			this.SendPropertyChanging();
			entity.Nhom = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[To]")]
	public partial class To : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID_To;
		
		private string _TenTo;
		
		private string _MoTa;
		
		private long _MaTKB;
		
		private EntitySet<Nhom> _Nhoms;
		
		private EntityRef<ThoiKhoaBieu> _ThoiKhoaBieu;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_ToChanging(long value);
    partial void OnID_ToChanged();
    partial void OnTenToChanging(string value);
    partial void OnTenToChanged();
    partial void OnMoTaChanging(string value);
    partial void OnMoTaChanged();
    partial void OnMaTKBChanging(long value);
    partial void OnMaTKBChanged();
    #endregion
		
		public To()
		{
			this._Nhoms = new EntitySet<Nhom>(new Action<Nhom>(this.attach_Nhoms), new Action<Nhom>(this.detach_Nhoms));
			this._ThoiKhoaBieu = default(EntityRef<ThoiKhoaBieu>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_To", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID_To
		{
			get
			{
				return this._ID_To;
			}
			set
			{
				if ((this._ID_To != value))
				{
					this.OnID_ToChanging(value);
					this.SendPropertyChanging();
					this._ID_To = value;
					this.SendPropertyChanged("ID_To");
					this.OnID_ToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenTo", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TenTo
		{
			get
			{
				return this._TenTo;
			}
			set
			{
				if ((this._TenTo != value))
				{
					this.OnTenToChanging(value);
					this.SendPropertyChanging();
					this._TenTo = value;
					this.SendPropertyChanged("TenTo");
					this.OnTenToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoTa", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string MoTa
		{
			get
			{
				return this._MoTa;
			}
			set
			{
				if ((this._MoTa != value))
				{
					this.OnMoTaChanging(value);
					this.SendPropertyChanging();
					this._MoTa = value;
					this.SendPropertyChanged("MoTa");
					this.OnMoTaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaTKB", DbType="BigInt NOT NULL")]
		public long MaTKB
		{
			get
			{
				return this._MaTKB;
			}
			set
			{
				if ((this._MaTKB != value))
				{
					if (this._ThoiKhoaBieu.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaTKBChanging(value);
					this.SendPropertyChanging();
					this._MaTKB = value;
					this.SendPropertyChanged("MaTKB");
					this.OnMaTKBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="To_Nhom", Storage="_Nhoms", ThisKey="ID_To", OtherKey="ID_To")]
		public EntitySet<Nhom> Nhoms
		{
			get
			{
				return this._Nhoms;
			}
			set
			{
				this._Nhoms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThoiKhoaBieu_To", Storage="_ThoiKhoaBieu", ThisKey="MaTKB", OtherKey="STT", IsForeignKey=true)]
		public ThoiKhoaBieu ThoiKhoaBieu
		{
			get
			{
				return this._ThoiKhoaBieu.Entity;
			}
			set
			{
				ThoiKhoaBieu previousValue = this._ThoiKhoaBieu.Entity;
				if (((previousValue != value) 
							|| (this._ThoiKhoaBieu.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ThoiKhoaBieu.Entity = null;
						previousValue.Tos.Remove(this);
					}
					this._ThoiKhoaBieu.Entity = value;
					if ((value != null))
					{
						value.Tos.Add(this);
						this._MaTKB = value.STT;
					}
					else
					{
						this._MaTKB = default(long);
					}
					this.SendPropertyChanged("ThoiKhoaBieu");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Nhoms(Nhom entity)
		{
			this.SendPropertyChanging();
			entity.To = this;
		}
		
		private void detach_Nhoms(Nhom entity)
		{
			this.SendPropertyChanging();
			entity.To = null;
		}
	}
}
#pragma warning restore 1591
